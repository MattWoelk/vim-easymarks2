To reload the script, run:
:source ~/.vim/autoload/test.vim


For highlighting, this may help:
http://stackoverflow.com/a/11089355/947305

highlight UnwantedTab ctermbg=red guibg=darkred
match UnwantedTab /\t/

Surround marks with hidden elements so that the highlighting code is simple:
:help conceal

:set conceallevel=2
:set concealcursor=nc

use *' '* as the conceal items, like in vim help files

:syntax match Todo /bar/ conceal



STEPS:

- Insert '<easymarks2>' and '</easymarks2>' around each mark

- Hide them: (read in these values first, so we can revert back to them??)
:set conceallevel=2
:set concealcursor=nc
:syntax match Todo /<\/*easymarks2>/ conceal

- change mark chars to be the name of the mark

- highlight the marks, so that they're visually distinct
:highlight easymarksmark ctermbg=red guibg=darkred
:match easymarksmark /<easymarks2>.*<\/easymarks2>/

- Allow the user to either hit escape, or go to a mark

- Disable highlighting of the marks
:call clearmatches()

- Disable the conceal highlighting
:syntax clear Todo

- change mark chars back to how they were





So far the commands in the script were exeljcuted by Vim directly.  The
":execute" command allows executing the result of an expression.  This is a
very powerful way to build commands and execute them.
   An example is to jump to a tag, which is contained in a variable:

    :execute "tag " . tag_name

The "." is used to concatenate the string "tag " with the value of variable
"tag_name".  Suppose "tag_name" has the value "get_cmd", then the command that
will be executed is:

    :tag get_cmd

The ":execute" command can only execute colon commands.  The ":normal" command
executes Normal mode commands.  However, its argument is not an expression but
the literal command characters.  Example:

    :normal gg=G

This jumps to the first line and formats all lines with the "=" operator.
   To make ":normal" work with an expression, combine ":execute" with it.
Example:

    :execute "normal " . normal_commands

The variable "normal_commands" must contain the Normal mode commands.
   Make sure that the argument for ":normal" is a complete command.  Otherwise
Vim will run into the end of the argument and abort the command.  For example,
if you start Insert mode, you must leave Insert mode as well.  This works:

    :execute "normal Inew text \<Esc>"

This inserts "new text " in the current line.  Notice the use of the special
key "\<Esc>".  This avoids having to enter a real <Esc> character in your
script.

If you don't want to execute a string but evaluate it to get its expression
value, you can use the eval() function:

    :let optname = "path"
    :let optval = eval('&' . optname)

A "&" character is prepended to "path", thus the argument to eval() is
"&path".  The result will then be the value of the 'path' option.
   The same thing can be done with:
    :exe 'let optval = &' . optname



http://stackoverflow.com/questions/5825490/vim-command-with-count-and-motion-possible


Seemingly the purpose of <Plug>:
:nm <Plug>Ls :ls<CR>   # <Plug> is a single keystroke that a keyboard cannot produce
                       # to be used like this:
:nm <Leader>L <Plug>Ls # here it is called and used, but cannot be typed
:execute "normal \<Plug>Ls" #needs to be escaped in this form
:call feedkeys("\<Plug>Ls") # same here
